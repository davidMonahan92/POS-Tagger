# Initial caps normalisation
# from Beesley & Karttunen (2003)
echo <<< defining ALLCAPS >>>
clear stack 
define Aupper [A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|Á|É|Í|Ó|Ú];
define Alower [a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|á|é|í|ó|ú];
define allCap a (->) A, b (->) B, c (->) C, d (->) D, e (->) E, f (->) F, g (->) G, h (->) H, i (->) I, j (->) J, k (->) K, l (->) L, m (->) M, n (->) N, o (->) O, p (->) P, q (->) Q, r (->) R, s (->) S, t (->) T, u (->) U, v (->) V, w (->) W, x (->) X, y (->) Y, z (->) Z, á (->) Á, é (->) É, í (->) Í, ó (->) Ó, ú (->) Ú \/ .#. (Alower) Aupper* _ Aupper* .#. ; 

push allCap

save stack bin/allcaps.fst

echo <<< COMPOSING >>>
clear stack

!! read regex allCap .o. @"bin/all.fst";
read regex @"bin/all.fst" .o. @"bin/allcaps.fst";

save stack bin/allcaps-all.fst

read regex @"bin/all.fst" .o. @"bin/allcaps.fst"; 
save stack bin/allcaps-all.fst

